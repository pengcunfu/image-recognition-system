---
alwaysApply: true
---

## API 测试规范

本项目使用 curl 进行 API 接口测试,遵循以下规范。

### curl 命令规范

#### Windows PowerShell 环境

在 Windows PowerShell 中使用 curl 时:

- 使用 `curl.exe` 而非 PowerShell 的 `Invoke-WebRequest` 别名
- JSON 数据使用单引号包裹,内部使用双引号
- 多行命令使用反引号 `` ` `` 进行换行

#### 基本请求格式

```powershell
# GET 请求
curl.exe -X GET "http://localhost:8080/api/endpoint" `
  -H "Authorization: Bearer TOKEN" `
  -H "Content-Type: application/json"

# POST 请求 (JSON 数据)
curl.exe -X POST "http://localhost:8080/api/endpoint" `
  -H "Authorization: Bearer TOKEN" `
  -H "Content-Type: application/json" `
  -d '{\"key\":\"value\"}'

# POST 请求 (表单数据)
curl.exe -X POST "http://localhost:8080/api/endpoint" `
  -H "Authorization: Bearer TOKEN" `
  -F "file=@path/to/file.jpg" `
  -F "data=value"

# PUT 请求
curl.exe -X PUT "http://localhost:8080/api/endpoint/1" `
  -H "Authorization: Bearer TOKEN" `
  -H "Content-Type: application/json" `
  -d '{\"key\":\"updated_value\"}'

# DELETE 请求
curl.exe -X DELETE "http://localhost:8080/api/endpoint/1" `
  -H "Authorization: Bearer TOKEN"
```

### 常用测试场景

#### 认证相关

```powershell
# 用户注册
curl.exe -X POST "http://localhost:8080/api/auth/register" `
  -H "Content-Type: application/json" `
  -d '{\"username\":\"testuser\",\"email\":\"test@example.com\",\"password\":\"password123\"}'

# 用户登录
curl.exe -X POST "http://localhost:8080/api/auth/login" `
  -H "Content-Type: application/json" `
  -d '{\"username\":\"testuser\",\"password\":\"password123\"}'
```

#### 文件上传

```powershell
# 图片上传识别
curl.exe -X POST "http://localhost:8080/api/recognition/upload" `
  -H "Authorization: Bearer YOUR_TOKEN" `
  -F "image=@D:/path/to/image.jpg"
```

#### 带参数的请求

```powershell
# URL 参数
curl.exe -X GET "http://localhost:8080/api/posts?page=1&size=10&keyword=search" `
  -H "Authorization: Bearer TOKEN"

# 路径参数
curl.exe -X GET "http://localhost:8080/api/users/123" `
  -H "Authorization: Bearer TOKEN"
```

### 调试选项

```powershell
# 显示详细信息
curl.exe -v -X GET "http://localhost:8080/api/endpoint"

# 显示响应头
curl.exe -i -X GET "http://localhost:8080/api/endpoint"

# 保存响应到文件
curl.exe -X GET "http://localhost:8080/api/endpoint" -o response.json

# 显示请求耗时等统计信息
curl.exe -w "\nTime: %{time_total}s\nStatus: %{http_code}\n" `
  -X GET "http://localhost:8080/api/endpoint"
```

### 测试最佳实践

1. **使用变量保存 Token**
   ```powershell
   $token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
   curl.exe -X GET "http://localhost:8080/api/profile" `
     -H "Authorization: Bearer $token"
   ```

2. **使用环境变量保存基础 URL**
   ```powershell
   $baseUrl = "http://localhost:8080"
   curl.exe -X GET "$baseUrl/api/endpoint"
   ```

3. **保存响应进行调试**
   ```powershell
   curl.exe -X GET "http://localhost:8080/api/endpoint" `
     -H "Authorization: Bearer $token" `
     -o response.json -w "\nStatus: %{http_code}\n"
   ```

4. **测试文件上传时使用绝对路径**
   ```powershell
   curl.exe -X POST "http://localhost:8080/api/upload" `
     -H "Authorization: Bearer $token" `
     -F "file=@D:/Data/Desktop/test.jpg"
   ```

### 常见 API 测试示例

根据本项目的 API 设计,以下是常用测试命令:

```powershell
# 基础 URL
$baseUrl = "http://localhost:8080"

# 1. 用户注册
curl.exe -X POST "$baseUrl/api/auth/register" `
  -H "Content-Type: application/json" `
  -d '{\"username\":\"testuser\",\"email\":\"test@example.com\",\"password\":\"Test123456\"}'

# 2. 用户登录并保存 Token
$response = curl.exe -X POST "$baseUrl/api/auth/login" `
  -H "Content-Type: application/json" `
  -d '{\"username\":\"testuser\",\"password\":\"Test123456\"}'
# 从响应中提取 token (需手动处理 JSON)

# 3. 获取用户信息
curl.exe -X GET "$baseUrl/api/user/profile" `
  -H "Authorization: Bearer YOUR_TOKEN"

# 4. 图片识别
curl.exe -X POST "$baseUrl/api/recognition/upload" `
  -H "Authorization: Bearer YOUR_TOKEN" `
  -F "image=@D:/path/to/test.jpg"

# 5. 获取识别历史
curl.exe -X GET "$baseUrl/api/recognition/history?page=1&size=10" `
  -H "Authorization: Bearer YOUR_TOKEN"

# 6. 社区帖子列表
curl.exe -X GET "$baseUrl/api/community/posts?page=1&size=10" `
  -H "Authorization: Bearer YOUR_TOKEN"

# 7. 发布帖子
curl.exe -X POST "$baseUrl/api/community/posts" `
  -H "Authorization: Bearer YOUR_TOKEN" `
  -H "Content-Type: application/json" `
  -d '{\"title\":\"测试帖子\",\"content\":\"这是测试内容\"}'
```

### 注意事项

1. 在 PowerShell 中,JSON 数据的引号需要使用 `\"` 进行转义
2. 文件路径使用绝对路径,避免相对路径导致的问题
3. 上传文件时使用 `-F` 参数,发送 JSON 时使用 `-d` 参数
4. 测试前确保后端服务已启动
5. 敏感数据(如 Token)不要硬编码在测试脚本中,使用变量或环境变量

### 注意事项

1. 在 PowerShell 中,JSON 数据的引号需要使用 `\"` 进行转义
2. 文件路径使用绝对路径,避免相对路径导致的问题
3. 上传文件时使用 `-F` 参数,发送 JSON 时使用 `-d` 参数
4. 测试前确保后端服务已启动
5. 敏感数据(如 Token)不要硬编码在测试脚本中,使用变量或环境变量
### 注意事项

1. 在 PowerShell 中,JSON 数据的引号需要使用 `\"` 进行转义
2. 文件路径使用绝对路径,避免相对路径导致的问题
3. 上传文件时使用 `-F` 参数,发送 JSON 时使用 `-d` 参数
4. 测试前确保后端服务已启动
5. 敏感数据(如 Token)不要硬编码在测试脚本中,使用变量或环境变量

### AI 测试规范

**重要规则:**

1. **禁止创建测试脚本**: AI 不应创建任何测试脚本文件(.ps1, .sh, .bat 等)
2. **直接提供 curl 命令**: 当需要测试 API 时,直接提供可执行的 curl 命令
3. **权限处理**: 如果接口需要认证,AI 应提示用户先执行登录命令获取 token,然后用户会主动提供 token
4. **命令格式**: 所有 curl 命令必须是完整的、可直接在 PowerShell 中执行的
5. **逐步测试**: 对于复杂的测试流程,按步骤提供多个独立的 curl 命令

### 测试流程示例

当用户需要测试某个功能时,AI 应该这样做:

**步骤 1**: 提供登录命令
```powershell
curl.exe -X POST "http://localhost:8080/api/auth/login" `
  -H "Content-Type: application/json" `
  -d '{\"username\":\"admin\",\"password\":\"123456\"}'
```

**步骤 2**: 提示用户保存 Token
```powershell
# 从上面的响应中复制 token,然后执行:
$token = "YOUR_TOKEN_HERE"
```

**步骤 3**: 提供需要认证的 API 测试命令
```powershell
curl.exe -X POST "http://localhost:8080/api/recognition/recognize" `
  -H "Authorization: Bearer $token" `
  -F "file=@D:/path/to/your/image.jpg" `
  -F "recognitionType=0"
```

### 错误示范

❌ **不要这样做:**
- 创建测试脚本文件 (test-api.ps1)
- 在脚本中使用 Read-Host 等交互式命令
- 创建复杂的自动化测试脚本

✅ **应该这样做:**
- 直接给出 curl 命令
- 清晰说明每个步骤
- 让用户手动复制粘贴执行
